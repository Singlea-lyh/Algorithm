#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <stdbool.h>

//#ifndef bool
//    #define bool int
//    #define true 1
//    #define false 0
//#endif

#define SWAP(x, y) {int t = x; x = y; y = t;}

//递归方法实现过程：每次都把数组分为两部分，只需要比较其中一部分即可
/*
对输入数组进行递归划分，与快速排序不同的是，它只对划分出的子数组之一进行递归处理。
*/
int QuickSort(int a[], int low, int high){
	int i = low, j = high, k = 0;
	int temp = 0;
	
	srand((unsigned int)time(NULL));
	k = rand() % (high - low);
	SWAP(a[i], a[low + k]);
	temp = a[i];
	
	while(i < j){
		while(i < j && a[j] > temp) j--;
		if(i < j){
			a[i++] = a[j];
		}
		while(i < j && a[i] < temp) i++;
		if(i < j){
			a[j--] = a[i];
		}
	}
	a[i] = temp;
	return i;	
}

int Get_QuickSort(int a[], int low, int high, int k){
	int partion = 0;
	int Result = 0;
	
	if(low < high){
		partion = QuickSort(a, low, high);
		if(partion  < k){
			Result = Get_QuickSort(a, partion + 1, high, k - partion - 1);
		}
		else if(partion > k){
			Result = Get_QuickSort(a, low, partion - 1, k);
		}
		else{
			Result = a[partion];
		}
	}
	return Result;
} 
int GetNumberPosi_Recursion(int a[], int n, int k){
	int Result  = 0;
	
	Result = Get_QuickSort(a, 0, n - 1, k);
	return Result;
}
//利用中位数实现的线性时间选择问题，最坏情况为线性
/*
思想：如果能在线性时间内找到一个划分基准使得按这个基准所划分出的2个子数组的长度都至少为原数组长度的ε倍(0<ε<1),
那么就可以在最坏情况下用O(n)时间完成选择任务。例如，当ε=9/10，算法递归调用所产生的子数组的长度至少缩短1/10。
所以，在最坏情况下，算法所需的计算时间T(n)满足递推式T(n)<=T(9n/10)+O(n)。由此可得T(n)=O(n)。

实现步骤： (1)将所有的数n个以每5个划分为一组共n /5组，将不足5个的那组忽略，然后用任意一种排序算法，因为只对5个数进行排序，
             所以任取一种排序法就可以了。将每组中的元素排好序再分别取每组的中位数，得到n/5个中位数。

          (2)取这个中位数的中位数，如果是偶数，就找它的2个中位数中较大的一个作为划分基准。

          (3)将全部的数划分为两个部分，小于基准的在左边，大于等于基准的放右边。在这种情况下找出的基准x至少比个3(n - 5)/10元素大。 
		  因为在每一组中有2个元素小于本组的中位数，有n/5 - 1个小于基准，中位数处于1/2 * (n / 5 -1)，即n / 5个中位数中又有(n - 5)/10个
		  小于基准x。因此至少有3((n - 5)/10)个元素小于基准x。同理基准x也至少比3((n - 5)/10)个元素小。而当n≥75时≥n/4所以按此基准划分
		  所得的2个子数组的长度都至少缩短1/4。 
*/ 
void BubbleSort(int a[], int low, int high){
	int i = low, j = 0;
	int n = high - low + 1;
	bool exchange = true;
	for(i = low; i <= high; i++){
		exchange = true;
		for(j = low; j < n - i; j++){
			if(a[j] > a[j + 1]){
				SWAP(a[j], a[j + 1]);
				exchange = false;
			}
		}
		if(exchange){
			break;
		}	
	}
	return;
}
int Partition(int a[], int low, int high, int MidMedina){
	int i = low, j = high;
	
	while(i < j){
		while(i < j && a[i++] > MidMedina);
		while(a[j--] > MidMedina);
		SWAP(a[i], a[j]);
	}
	return i;
}
int Select(int a[], int low, int high, int k){
	int Result = 0;
	int i = 0;
	
	for(i = 0; i <= (high - low - 4) / 5; i++){
		BubbleSort(a, low + 5 * i, low + 5 * i + 4);
		SWAP(a[low + i], a[low + 5 * i + 2]);
	}
	int MidMedina = Select(a, low, low + --i, i / 10);
	int position = Partition(a, low, high, MidMedina);
	int j = MidMedina - low + 1;
	
	if(k <=j ){
		Result = Select(a, low, position, k);		
	}
	else{
		Result = Select(a, position + 1, high, k - j);
	}
	
	return Result;	
}

int GetNumberPosi_Medina(int a[], int n, int k){
	int Result = 0;
	Result = Select(a, 0, n - 1, k);
	return Result;
}


int main(){
	int n = 0, k = 0;
	int *a = NULL;
	
	int Result1 = 0, Result2 = 0;
	
	printf("Please input the count of Number : ");
	scanf("%d", &n);
	a = (int *)calloc(n, sizeof(int));
	
	srand((unsigned int) time(NULL));
    for(int i = 0; i < n; i++){
    	a[i] = rand() % n; 
    	printf("a[%d] = %d   ", i, a[i]);
    	if(i % 10 == 9){
    		printf("\n");
		}
	}	
	printf("\n");
	
	printf("Please input the number you want to get the position(<n) : ");
	scanf("%d", &k);
	
	Result1 = GetNumberPosi_Recursion(a, n, k - 1);
	Result2 = GetNumberPosi_Medina(a, n, k - 1);
	
	printf("The number of position is : Recursion: %d\n", Result1);
	printf("The number of position is : Medina: %d\n", Result2);
	return 0;	
} 

#if 0
//网上C++源代码
//2d9-2 中位数线性时间选择  
#include <ctime>  
#include <iostream>   
#include <stdlib.h>
using namespace std;   
  
template <class Type>  
void Swap(Type &x,Type &y);  
  
inline int Random(int x, int y);  
  
template <class Type>  
void BubbleSort(Type a[],int p,int r);  
  
template <class Type>  
int Partition(Type a[],int p,int r,Type x);  
  
template <class Type>  
Type Select(Type a[],int p,int r,int k);  
  
int main()  
{  
    //初始化数组  
    int a[100];  
  
    //必须放在循环体外面  
    srand((unsigned)time(0));  
  
    for(int i=0; i<100; i++)  
    {  
        a[i] = Random(0,500);  
        cout<<"a["<<i<<"]:"<<a[i]<<" ";  
    }  
    cout<<endl;  
  
    cout<<"第83小元素是"<<Select(a,0,99,83)<<endl;  
  
    //重新排序，对比结果  
    BubbleSort(a,0,99);  
  
    for(int i=0; i<100; i++)  
    {  
        cout<<"a["<<i<<"]:"<<a[i]<<" "; 
		if(i % 8 == 7){
			cout<<endl;
		}
    }  
    cout<<endl;  
}  
  
template <class Type>  
void Swap(Type &x,Type &y)  
{  
    Type temp = x;  
    x = y;  
    y = temp;  
}  
  
inline int Random(int x, int y)  
{  
     int ran_num = rand() % (y - x) + x;  
     return ran_num;  
}  
  
//冒泡排序  
template <class Type>  
void BubbleSort(Type a[],int p,int r)  
{  
     //记录一次遍历中是否有元素的交换     
     bool exchange;    
     for(int i=p; i<=r-1;i++)    
     {    
        exchange = false ;    
        for(int j=i+1; j<=r; j++)    
        {    
            if(a[j]<a[j-1])    
            {    
                Swap(a[j],a[j-1]);   
                exchange = true;    
            }     
        }     
        //如果这次遍历没有元素的交换,那么排序结束     
        if(false == exchange)    
        {  
             break ;    
        }  
     }  
}  
  
template <class Type>  
int Partition(Type a[],int p,int r,Type x)  
{  
    int i = p-1,j = r + 1;  
  
    while(true)  
    {  
        while(a[++i]<x && i<r);  
        while(a[--j]>x);  
        if(i>=j)  
        {  
            break;  
        }  
        Swap(a[i],a[j]);  
    }     
    return j;  
}  
  
  
template <class Type>  
Type Select(Type a[],int p,int r,int k)  
{  
    if(r-p<75)  
    {  
        BubbleSort(a,p,r);  
        return a[p+k-1];  
    }  
    //(r-p-4)/5相当于n-5  
    for(int i=0; i<=(r-p-4)/5; i++)  
    {  
        //将元素每5个分成一组，分别排序，并将该组中位数与a[p+i]交换位置  
        //使所有中位数都排列在数组最左侧，以便进一步查找中位数的中位数  
        BubbleSort(a,p+5*i,p+5*i+4);  
        Swap(a[p+5*i+2],a[p+i]);  
    }  
    //找中位数的中位数  
    Type x = Select(a,p,p+(r-p-4)/5,(r-p-4)/10);  
    int i = Partition(a,p,r,x);  
    int j = i-p+1;  
    if(k<=j)  
    {  
        return Select(a,p,i,k);  
    }  
    else  
    {  
        return Select(a,i+1,r,k-j);  
    }  
}  
#endif

